render_array_paragraph' => array(
    '#type' => 'markup',
    '#markup' => '<p>'.t('Si modifica los datos actuales, tambien serán modificados en la Base datos, manejar con precaución.').'</p>',
    '#value' => '<p>This is a paragraph.</p>'
    '#cache' => ?
    '#access' => quien tiene acceso (access_callback, access_arguments)
    '#format' => formato de texto: HTML, Markdown, Textile (ni idea) 'html'
    '#cache_max_age' => 3600
  ),

TIPOS de CAMPOS EN FORMULARIOS:
Text: Un campo de texto permite al usuario introducir un texto libre.
Text long: Un campo de texto largo permite al usuario introducir un texto de mayor longitud que un campo de texto.
Text with summary: Un campo de texto con resumen permite al usuario introducir un texto libre, así como un resumen del texto.
Number: Un campo de número permite al usuario introducir un número.
Date: Un campo de fecha permite al usuario seleccionar una fecha.
Time: Un campo de hora permite al usuario seleccionar una hora.
Datetime: Un campo de fecha y hora permite al usuario seleccionar una fecha y una hora.
File: Un campo de archivo permite al usuario subir un archivo.
Image: Un campo de imagen permite al usuario subir una imagen.
Link: Un campo de enlace permite al usuario introducir un enlace a una página web.
Email: Un campo de correo electrónico permite al usuario introducir una dirección de correo electrónico.
Phone: Un campo de teléfono permite al usuario introducir un número de teléfono.
List: Un campo de lista permite al usuario seleccionar una opción de una lista.
Checkbox: Un campo de casilla de verificación permite al usuario seleccionar una o varias opciones.
Radios: Un campo de botones de radio permite al usuario seleccionar una opción de entre varias opciones.
Select: Un campo de selección permite al usuario seleccionar una opción de entre varias opciones.
Field collection: Un campo de colección permite al usuario añadir varios elementos de contenido.
Entity reference: Un campo de referencia a entidad permite al usuario seleccionar una entidad de entre varias entidades.

TIPOS DE ELEMENTOS EN PAGINA:

Textfield:
php
Copy code
'#type' => 'textfield',
Para campos de texto de una sola línea.

Textarea:
php
Copy code
'#type' => 'textarea',
Para campos de texto de varias líneas.

Select:
php
Copy code
'#type' => 'select',
Para listas desplegables.

Checkbox:
php
Copy code
'#type' => 'checkbox',
Para casillas de verificación.

Radios:
php
Copy code
'#type' => 'radios',
Para botones de opción.

Fieldset:
php
Copy code
'#type' => 'fieldset',
Para agrupar elementos del formulario en un conjunto lógico.

Managed File:
php
Copy code
'#type' => 'managed_file',
Para la carga de archivos.

Date Popup:
php
Copy code
'#type' => 'date_popup',
Para la selección de fechas con un calendario emergente.

Submit:
php
Copy code
'#type' => 'submit',
Para botones de envío.

Password:
php
Copy code
'#type' => 'password',


    //Listado de Expediciones - Multiples valores -> Datos Externos
    $form['expediciones'] = array(
      '#type' => 'textarea', // Cambiado de 'textfield' a 'textfield_multiple'
      '#title' => t('expediciones'),
      '#maxlength' => 40,
      '#rows' => 2,
      '#required' => FALSE,
    );
    

function viajesiron_install()
{
    $t = get_t();

    // Step 1 - Define the custom content type
    $content_type = array(
        'type'          => 'book',
        'name'          => $t('Book'),
        'description'   => $t('Create a new book'),
        'title_label'   => $t('Book title'),
        'base'          => 'node_content',
        'custom'        => TRUE,
    );
    $node_type = node_type_set_defaults($content_type);
    node_type_save($node_type);

    // Step 2 - Create new fields
    $fields = array(
        // Author’s name
        'book_author_name'  => array(
            'field_name'    => 'book_author_name',
            'type'          => 'text',
            'cardinality'   => 1,
        ),

        // Description
        'book_description'  => array(
            'field_name'    => 'book_description',
            'type'          => 'text_long',
            'cardinality'   => 1,
        ),
    );

    foreach( $fields as $field ) {
        field_create_field($field);
    }

    // Step 3 - Attach fields to content type
    $instances = array(
        // Author’s name
        'book_author_name'  => array(
            'field_name'   => 'book_author_name',
            'label'        => $t('Author Name'),
            'required'     => TRUE,
            'widget'       => array(
                'type'  => 'text_textfield'
            ),
        ),

        // Description
        'book_description'  => array(
            'field_name'   => 'book_description',
            'label'        => $t('Description'),
            'required'     => TRUE,
            'widget'       => array(
                'type'  => 'text_textarea'
            ),
        ),
    );

    foreach( $instances as $instance ) { // Loop through our instances
        $instance['entity_type']   = 'node';
        $instance['bundle']        = 'book'; // Attach the instance to our content type
        field_create_instance($instance);
    }

}

function viajesiron_install() {

    $t = get_t();
    // Define el tipo de contenido.
    $name_content_type = 'tipo_viaje';
    drupal_set_message('Instalando modulo','status');
  
    // Verifica si el tipo de contenido ya existe.
    if (!node_type_load($type)) {
        drupal_set_message('Creando nuevo tipo de contenido', 'status');
      // Define la configuración del tipo de contenido.
      $content_type = array(
        'type' => $name_content_type,
        'name' => $t('Conformador de Viajes'),
        'base' => 'node_content',
        'description' => $t('Tipo personalizado, creado para el modulo Viajes - Toxement'),
        'custom' => TRUE,
        'modified' => TRUE,
        'locked' => FALSE,
      );
      //genera valores de defecto
      $node_type = node_type_set_defaults($content_type);
      // Crea el tipo de contenido.
      node_type_save($node_type);
  
      // Definir campos.
      $fields = array(
        array(
            //'label' => $t('ID'),  //ID
            'field_name' => 'external id',
            'type' => 'text',
            'cardinality' => 1,
            'translatable' => FALSE,
            'settings' => array(
            'max_length' => 255,
            ),
        ),
        array(
            //'label' => $t('Nombre del Viaje'), //Nombre del viaje
            'field_name' => 'nombre_viaje',
            'type' => 'text',
            'cardinality' => 1,
            'translatable' => FALSE,
            'settings' => array(
            'max_length' => 255,
            ),
        ),
        array(
            //'label' => $t('Tipo de Carga'), //Tipo de Despacho
            'field_name' => 'tipo_carga',
            'type' => 'text',
            'cardinality' => 1,
            'translatable' => FALSE,
            'settings' => array(
              'max_length' => 255,
            ),
          ),
        array(
            //'label' => $t('Adicionales'), //adicionales
            'field_name' => 'adicionales',
            'type' => 'text',
            'cardinality' => FIELD_CARDINALITY_UNLIMITED,
            'translatable' => FALSE,
            'settings' => array(
            'max_length' => 255,
            ),
        ),
        array(
            //'label' => $t('Expediciones'), //expediciones
            'field_name' => 'expediciones',
            'type' => 'text',
            'cardinality' => FIELD_CARDINALITY_UNLIMITED,
            'translatable' => FALSE,
            'settings' => array(
                'max_length' => 255,
            ),
            ),
      );
  
      // crea los campos antes de incluirlos al tipo de contenido.
      foreach ($fields as $field) {
        field_create_field($field);
      }
  
      // Asignar campos al tipo de contenido.
      foreach ($fields as $field) {
        $instance = array(
          'field_name' => $field['field_name'],
          'entity_type' => 'node',
          'bundle' => $name_content_type,
          'label' => $field['label'],
          'widget' => array(
            'type' => 'text_textfield',
          ),
          /*'settings' => array(
            'display_summary' => FALSE,
          ),*/
        );
        field_create_instance($instance);
      }

      // Limpia la caché de campos.
      field_cache_clear();
    }else{
        drupal_set_message('Ya esta el tipo de contenido', 'status');
    }
  }


  //// POST ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  <?php

// URL del servidor al que enviar la solicitud POST
$url = 'https://ejemplo.com/api';

// Datos en formato JSON
$data = array(
    'id' => 'new',
    'nombre_viaje' => 'Viaje de ejemplo',
    'tipo_carga' => 'Aéreo',
    'adicionales' => array(
        array(
            'id' => '1',
            'tipo' => 'Comida',
            'costo' => 20
        ),
        array(
            'id' => '2',
            'tipo' => 'Seguro',
            'costo' => 50
        )
    ),
    'expediciones' => array(
        array(
            'num_expedicion' => 'EXP2023-001'
        ),
        array(
            'num_expedicion' => 'EXP2023-002'
        )
    )
);

// Convertir el array a formato JSON
$json_data = json_encode($data);

// Configuración de la solicitud cURL
$ch = curl_init($url);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Content-Type: application/json',
    'Content-Length: ' . strlen($json_data))
);

// Ejecutar la solicitud cURL y obtener la respuesta
$response = curl_exec($ch);

// Verificar errores
if (curl_errno($ch)) {
    echo 'Error en la solicitud cURL: ' . curl_error($ch);
}

// Cerrar la conexión cURL
curl_close($ch);

// Imprimir la respuesta
echo $response;
?>

//consola al buscar un WHS por id en eclipse
23:58:08,889 INFO  [stdout] (default task-1) Consultando WHS 50690313
23:58:08,890 INFO  [stdout] (default task-1) Consultando despachos iron por whs 50690313
23:58:08,890 INFO  [stdout] (default task-1) Listando despachos por WHS 50690313
23:58:08,892 INFO  [stdout] (default task-1) Encontrando 0 resultados bajo la consulta por whs 50690313
23:58:29,656 INFO  [stdout] (default task-1) Consultando WHS 50688240
23:58:29,67 INFO  [stdout] (default task-1) Consultando despachos iron por whs 50688240
23:58:29,657 INFO  [stdout] (default task-1) Listando despachos por WHS 50688240
23:58:29,659 INFO  [stdout] (default task-1) Encontrando 0 resultados bajo la consulta por whs 50688240

AYUDA WSCLIENTE POST -> https://www.drupal.org/node/1114320
function example_post_call($node) {
  $service = wsclient_service_load('service_name');
  // An array that will be serialized into JSON or XML depending on your configuration.
  // Various settings in you service's "request formatter" determine how this array is
  // transmitted. Ensure that there is a parameter set in your method where this can be
  // stored.
  $data = array(
    'name' => $node->title,
  );

  try {
    // The method called here is the machine name of your operation.
    // You can also call invoke('my_post_method', $data) instead.
    // We pass $data in here, where it will be used as $arguments for this WSClient, 
    // which in turn will be used to create the 'parameters' and 'data' for the request.
    // If you have more parameters required for your service, those need to be passed
    // here too.
    $response = $service->my_post_method($data);
  }
  catch (WSClientException $exception) {
    watchdog('example', $exception->__toString(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return $response;
}

/**
 * Implements hook_wsclient_rest_request_alter().
 */
function example_wsclient_rest_request_alter($request, $service) {
  // This hook can be used to modify anything in the $request object just before it is 
  // handed off to CURL. In this example, we want to unset the data from the
  // parameters, and an api key from the data. This is because the REST client takes all
  // the arguments and parameters and copies them into the data element.
  unset($request->parameters['RequestRootName']);
  unset($request->data['key']);
}

function my_modulo_preprocess_page(&$variables) {
  // Tu código de preprocesamiento aquí -> antes de cargar la pagina
  
  // Por ejemplo, agregar una variable personalizada a la plantilla
  $variables['mi_variable'] = 'Hola, mundo!';
}

en un form tipo 'submit' PROBAR!!!!!!!!!!!!!
'#submit' => array('tu_modulo_tu_formulario_submit_buscar'),


// DAR FOCO LUEGO DE CARGAR LA PAGINA
$form['campo_ejemplo'] = array(
  '#type' => 'textfield',
  '#title' => t('Campo de ejemplo'),
  '#default_value' => isset($form_state['input']['campo_ejemplo']) ? $form_state['input']['campo_ejemplo'] : '',
  '#attributes' => array(
    'autofocus' => 'autofocus',
  ),
);

//VERIFICACION de que un form tiene autofocus
$element = $form['campo_ejemplo']; // Reemplaza 'campo_ejemplo' con el nombre de tu campo.

// Verifica si el atributo autofocus está presente en los atributos del elemento.
$hasAutofocus = isset($element['#attributes']['autofocus']);

if ($hasAutofocus) {
  // El elemento tiene el atributo autofocus.
  // Tu lógica aquí.
}

// URL del servicio web
$url = 'http://ejemplo.com/servicio';

// Datos que deseas enviar en la solicitud POST (en formato JSON)
$data = array(
  'parametro1' => 'valor1',
  'parametro2' => 'valor2',
);

// Codificar los datos en formato JSON
$json_data = drupal_json_encode($data);

// Configurar opciones para la solicitud
$options = array(
  'method' => 'POST',
  'data' => $json_data,
  'headers' => array(
    'Content-Type' => 'application/json',
  ),
);

// Realizar la solicitud POST
$response = drupal_http_request($url, $options);

// Verificar si la solicitud fue exitosa
if ($response->code == 200) {
  // Decodificar la respuesta JSON
  $decoded_response = drupal_json_decode($response->data);

  // Manejar la respuesta
  dpm($decoded_response); // Utiliza dpm() para imprimir la respuesta en el navegador
}
else {
  // Manejar errores
  drupal_set_message('Error al realizar la solicitud al servicio web', 'error');
}


// Cargar el servicio WSClient - INTENTO FALLIDO
    try {
        $service = wsclient_service_load('toxementintranetrestservices_tms');
    }
    catch (WSClientException $exception) {
        drupal_set_message('No se pudo cargar el servicio REST configurado', 'error');
        return FALSE;
    }
    
    // Configurar los parámetros de la solicitud POST
    $params = array(
        'data' => $proccessed_data,  // Los datos que deseas enviar en la solicitud POST
    );
    // Configurar opciones para la solicitud POST
    $options = array(
        'method' => 'POST',
        'data' => $proccessed_data,  // Asegúrate de codificar los datos en formato JSON si estás enviando un cuerpo JSON
        'headers' => array(
        'Content-Type' => 'application/json',
        ),
        'timeout' => 10,  // Tiempo máximo de espera en segundos
  );
    
    // Realizar la solicitud POST
    try {
        add_error('intentando acceder el servicio');
        $response = $service->crearViajeTMSIRONTEST($params, 'POST', $options);
    }
    catch (WSClientException $exception) {
        drupal_set_message('Error al realizar la solicitud POST', 'error');
        return FALSE;
    }



    COFIGO FUNCIONAL!!!

    // URL del servicio web
    $url = 'http://127.0.0.1:38080/ToxementIntranetRestServices/TMS/crearViajeTMSIRONTEST';

    // Datos que deseas enviar en la solicitud POST (en formato JSON)
    /*$data = array(
    'parametro1' => 'valor1',
    'parametro2' => 'valor2',
    );*/

    // Codificar los datos en formato JSON
    //$json_data = drupal_json_encode($data);

    // Configurar opciones para la solicitud
    $options = array(
    'method' => 'POST',
    'data' => $proccessed_data,
    'headers' => array(
        'Content-Type' => 'application/json',
    ),
    );

    // Realizar la solicitud POST
    $response = drupal_http_request($url, $options);

    // Verificar si la solicitud fue exitosa
    if ($response->code == 200) {
    // Decodificar la respuesta JSON
    $decoded_response = drupal_json_decode($response->data);

    // Manejar la respuesta
    //dpm($decoded_response); // Utiliza dpm() para imprimir la respuesta en el navegador
    }
    else {
    // Manejar errores
    drupal_set_message('Error al realizar la solicitud al servicio web', 'error');
    }


    add_error('finalice consulta, respuesta:');
    add_error($decoded_response);
    return $decoded_response;

    stdClass Object
        (
            [type] => cargue_viajes
            [title] => Este es el nombre del viaje title
            [viaje_server_id] => Array viaje_server_id
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 1
                                )

                        )

                )

            [viaje_transportadora] => Array viaje_transportadora
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 
                                )

                        )

                )

            [viaje_costo_total_flete] => Array viaje_costo_total_flete
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 250000
                                )

                        )

                )

            [viaje_peso_total_flete] => Array viaje_peso_total_flete
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 300
                                )

                        )

                )

            [viaje_tipo_carga] => Array viaje_tipo_carga
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 12774
                                )

                        )

                )

            [viaje_remisiones] => Array viaje_remisiones
                (
                    [und] => Array
                        (
                            [0] => Array
                                (
                                    [value] => 50810320
                                )

                            [1] => Array
                                (
                                    [value] => 50809845
                                )

                            [2] => Array
                                (
                                    [value] => 50809844
                                )

                            [3] => Array
                                (
                                    [value] => 50809843
                                )

                            [4] => Array
                                (
                                    [value] => 50809842
                                )
